<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
	<title>KOTools test page</title>
	<link rel="stylesheet" href="qunit/qunit-1.9.0.css">
	<script src="knockout-2.1.0.min.js"></script>
	<script src="kotools.js"></script>
	<meta charset=utf-8 />
	<style>
		body 				{ font-family: verdana; font-size: 12px }
		label				{ width: 200px; font-weight: bold; display: inline-block; }

        /* Start of "Micro clearfix" */
        .cf { zoom: 1; }
        .cf:before,
        .cf:after { content: ""; display: table; }
        .cf:after { clear: both; }

        .clear 				{ clear: both }
		.fieldSurround 		{ float: left; width: 300px; margin-top: 16px }
		.valueSurround		{ float: left; clear: left }

		.radioCollection label 	{ width: inherit; }

	</style>
</head>
<body>
	<div id="qunit"></div>
	<script src="qunit/qunit-1.9.0.js"></script>

	<div class='fieldSurround'>
		<label>Your name</label>
		<div>
			<input id="firstName" placeholder="First name" type="text" value="John" data-bind="valueInit: firstname"/>
			<input id="lastName" placeholder="Last name" type="text" data-bind="valueInit: lastname"/>
		</div>
	</div>
	<div class='valueSurround'>
		Your full name is: <span data-bind="text: fullname"></span>
	</div>
	<div class='clear'></div>

	<div class='fieldSurround'>
		<input id="sendSpam" type="checkbox" value="true" data-bind="valueInit: spam" checked/>
		<label for="sendSpam">Spam me please!</label>
	</div>
	<div class='valueSurround'>
		You like spam: <span data-bind="text: spam"></span>
	</div>
	<div class='clear'></div>

	<div class='fieldSurround'>
		<input id="sendNewsletter" type="checkbox" data-bind="valueInit: newsLetter"/>
		<label for="sendNewsletter">Send me your "news letter!"</label>
	</div>
	<div class='valueSurround'>
		You want the newsletter: <span data-bind="text: newsLetter"></span>
	</div>
	<div class='clear'></div>

	<div class='fieldSurround'>
		<label>Get weekly offers</label>
		<div class='radioCollection'>
			<input id="offersYes" value="yes" name="offers" type="radio" data-bind="valueInit: offers"/>
			<label for="offersYes">Yes</label>
			<input id="offersNo" value="no" name="offers" type="radio" data-bind="valueInit: offers"/>
			<label for="offersNo">No</label>
		</div>
	</div>
	<div class='valueSurround'>
		You like weekly offers: <span data-bind="text: offers"></span>
	</div>
	<div class='clear'></div>

	<div class='fieldSurround'>
		<label>How did you hear?</label>
		<select id="howHeard" data-bind="valueInit: heard, optionsInit: heardOptions">
			<option>Word of mouth</option>
			<option value="googled" selected>Found on google</option>
			<option value=3>Found on bing</option>
		</select>
	</div>
	<div class='valueSurround'>
		You heard by: <span data-bind="text: heard"></span>
	</div>
	<div class='clear'></div>

	<div class='fieldSurround'>
		<label>Comments</label>
		<textarea id="comments" data-bind="valueInit: comments">This is the most "instantly useful" thing I've ever seen!</textarea>
	</div>
	<div class='valueSurround'>
		Your comments: <span data-bind="text: comments"></span>
	</div>
	<div class='clear'></div>

	<div class='fieldSurround'>
		<label>Coffee complex data select</label>
		<select data-bind="valueInit: coffee, optionsInit: coffeeOptions">
			<option data-ko-price="3.40">Cappuccino</option>
			<option data-ko-price="3.90" value="Latte" selected>Large Latte</option>
			<option data-ko-price="3.20" value="Longblack">Long black</option>
		</select>
	</div>
	<div class='valueSurround'>
		Your coffee: <span data-bind="text: coffeeText().value + ' ' + coffeeText().price"></span>
	</div>
	<div class='clear'></div>

	<script>
		var Viewmodel = function(){
			var self = this;
			self.firstname = ko.observable();
			self.lastname = ko.observable();
			self.fullname = ko.computed({
				read: function(){
					var f = self.firstname(), l = self.lastname();
					return ((f)? f: '' ) + ((l)? ' ' + self.lastname(): '');
				}
			});
			self.comments = ko.observable();
			self.spam = ko.observable();
			self.offers = ko.observable();
			self.newsLetter = ko.observable();
			self.heard = ko.observable();
			self.heardOptions = ko.observableArray();

			self.coffee = ko.observable();
			self.coffeeOptions = ko.observableArray();
			//	Computed to get the coffee complex object
			self.coffeeText = ko.computed({
				read: function(){
					var value = self.coffee(),
						coffees = ko.utils.arrayFilter(self.coffeeOptions(), function(data) {
							return !!(data.value == value);
						});
					return (coffees && coffees.length == 1)? coffees[0]: { value: "Not selected", price: "0.00" };
				}
			});

		}, viewmodel = new Viewmodel(),
		o = [], s;

		//	Debug the model for our test
		ko.debugModel(viewmodel, {
			quiet: true,
			notify: function(name, value){
				o.push(name, value);
			}
		});

		//	Apply the model
		ko.applyBindings(viewmodel);
	</script>

	<script>
		var s = o[13],
			s2 = o[23];

		test( 'Execution order and content', function() {
			ok(	o[1] === 'John' &&
				o[2] === 'firstname' &&
				o[3] === 'John' &&
				o[4] === 'fullname' &&
				o[5] === 'John' &&
				o[6] === 'lastname' &&
				o[8] === 'spam' &&
				o[9] === 'true' &&
				o[10] === 'heard' &&
				o[11] === 'googled' &&
				o[12] === 'heardOptions' &&
				o[14] === 'comments' &&
				o[15] === 'This is the most "instantly useful" thing I\'ve ever seen!',
				o[16] === 'coffeeText'
			, "passed" );
		});

		test('Select options', function(){
			ok( s[0].value === 'Word of mouth' &&
				s[0].name === 'Word of mouth' &&
				s[1].value === 'googled' &&
				s[1].name === 'Found on google' &&
				s[2].value === '3' &&
				s[2].name === 'Found on bing'
			, "correct");
			ok( s2[0].value === 'Cappuccino' &&
				s2[0].name === 'Cappuccino' &&
				s2[0].price === '3.40' &&
				s2[1].value === 'Latte' &&
				s2[1].name === 'Large Latte' &&
				s2[1].price === '3.90' &&
				s2[2].value === 'Longblack' &&
				s2[2].name === 'Long black' &&
				s2[2].price === '3.20'
			, "correct");
		})
	</script>
</body>
</html>
